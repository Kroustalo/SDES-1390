 int  key, output, k1, k2;
    int split[2];
    

    int message, ER,XOROUT1;
    int LR[2]; //0 LEFT 1 RIGHT

    int s0[4][4] = { {1,0,3,2},{3,2,1,0},{0,2,1,3},{3,1,3,2} };
    int s1[4][4] = { {0,1,2,3},{2,0,1,3},{3,0,1,0},{2,1,0,3} };

    int S[2]; //for s0 and s1 respectivly
    int parts[2]; //returns from s0 and s1
    int p4, XOROUT2;


    message = 0b11110011;
    key = 0b1010000010; //642
    // 0b1000001100 524

    //OG
    printf("10-bit key: %d\n", key);
    print_bin(key, 10);
    
    //P10
    key = P10_perm(key);

    if (key == -1) { //saftey
        return 1;
    }

    
    printf("\nP10: %d\n", key);
    print_bin(key, 10);
    

    //SPLIT 10
    Split(key, 10, split);
    printf("\nsplit1: %d\n", split[0]);
    print_bin(split[0], 5);
    printf("split2: %d\n", split[1]);
    print_bin(split[1], 5);
    

    //K1
    LS_1(split);
    printf("\nls1 shift1: %d\n", split[0]);
    print_bin(split[0], 5);
    printf("ls1 shift2: %d\n", split[1]);
    print_bin(split[1], 5);

    k1 = K_perm(split);
    printf("\nK1: %d\n", k1);
    print_bin(k1, 8);

    //K2
    LS_1(split);
    LS_1(split);
    printf("\nls2 shift1: %d\n", split[0]);
    print_bin(split[0], 5);
    printf("ls2 shift2: %d\n", split[1]);
    print_bin(split[1], 5);

    k2 = K_perm(split);
    printf("\nK2: %d\n", k2);
    print_bin(k2, 8);

    //message
    printf("\n8bit message: %d\n", message);
    print_bin(message, 8);

    //ip
    message = IP_perm(message);

    if (message == -1) { //saftey
        return 1;
    }

    printf("\nIP: %d\n", message);
    print_bin(message, 8);

    //SPLIT 8
    Split(message,8,LR);
    printf("\nLEFT: %d\n", LR[0]);
    print_bin(LR[0], 4);
    printf("RIGHT: %d\n", LR[1]);
    print_bin(LR[1], 4);

    //ER
    ER = ER_perm(LR[1]);
    if (ER == -1) { //saftey
            return 1;
    }

    printf("\nER: %d\n", ER);
    print_bin(ER, 8);

    //XOR OUT
    XOROUT1 = ER ^k1;
    printf("\nER XOR k1 out: %d\n", XOROUT1);
    print_bin(XOROUT1, 8);



    //SPLIT 8 #2
    Split(XOROUT1,8,S);
    printf("\nS0  PART: %d\n", S[0]);
    print_bin(S[0], 4);
    printf("S1 PART: %d\n", S[1]);
    print_bin(S[1], 4);


    //GRID
    parts[0] = grid(S[0], s0);
    parts[1] = grid(S[1], s1);

    printf("\nS0  return: %d\n", parts[0]);
    print_bin(parts[0], 2);
    printf("S1 return: %d\n", parts[1]);
    print_bin(parts[1], 2);


    //P4
    p4 = P4_perm(parts);
    if (key == -1) { //saftey
        return 1;
    }
    printf("\nP4: %d\n", p4);
    print_bin(p4, 4);

    //XOR OUT
    XOROUT2 = p4 ^ LR[0];
    printf("\nER XOR k1 out: %d\n", XOROUT2);
    print_bin(XOROUT2, 4);